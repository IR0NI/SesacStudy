
#include <iostream>

// 데이터 영역
int	gNumber;

/*
C++의 메모리 영역

지역변수 : 함수 안에서 선언하는 변수. 지역변수는 선언된 함수 안에서 사용할 수
있고 함수가 종료되면 메모리에서 제거된다.

전역변수 : 함수 바깥에 선언하는 변수. 전역변수가 선언된 아래의 모든 곳에서
전역변수에 접근하여 사용할 수 있다.
전역변수는 초기화 하지 않을 경우 자동으로 0으로 초기화된다.

정적변수 : static 키워드를 이용하여 선언된 변수이다. 
전역변수, 지역변수 모두 static 키워드를 붙일 수 있다.
지역변수에 static을 붙여서 변수를 선언하면 해당 변수는 초기화 안할 경우
0으로 자동으로 초기화가 되고 초기화 코드는 단 1번만 동작한다. 함수가 종료되도
메모리가 유지된다.

정적 변수, 전역 변수는 프로그램이 종료될 때 메모리에서 제거된다.

1. 스택 : 지역변수, 함수 인자의 메모리를 생성하는 공간이다.
함수가 종료되면 메모리를 제거한다.크기 제한이 있다.

2. 데이터 : 전역변수, 정적변수의 메모리를 생성하는 공간이다.
- 초기화된 데이터 영역 : 초기값이 있는 전역/정적 변수
- BSS 영역 : 초기값이 없는 전역/정적 변수(자동으로 0 초기화된 변수들)

3. 힙 : 동적할당된 메모리를 생성하는 공간이다.
(C언어 : malloc 등, C++ : new)
동적할당된 메모리는 프로그래머가 필요없을 때 반드시 제거를 해줘야 한다.

4. 코드 : 바이너리코드가 저장되는 영역이다. 함수도 코드이기 때문에 여기에 저
장된다. 이런 특징 때문에 함수도 주소를 가질 수 있다.
값 변경 불가(읽기전용)
*/

// 코드 영역
void Test()
{
	gNumber = 200;

	// 데이터 영역
	static int	Num1 = 200;

	printf("Num1 = %d\n", Num1);

	++Num1;
}

void Alloc(int* Addr)
{
	Addr = new int;
}

void Alloc(int** Addr)
{
	*Addr = new int;
}

int main()
{
	// 스택 영역
	int	Number = 111;

	Test();
	Test();
	Test();
	Test();
	Test();

	printf("%d\n", gNumber);

	// new를 이용해서 동적할당을 하고 delete를 이용해서 동적할당된 메모리를
	// 제거할 수 있다.
	// new와 delete는 연산자이다.
	// new를 이용해서 생성한 메모리를 delete를 이용해서 제거하지 않으면
	// 메모리 릭이 발생하게 된다.
	// new 변수타입; 을 해주면 변수타입의 크기만큼 힙에 메모리를 생성하고
	// 그 주소를 반환해준다.
	// delete 주소; 를 해주면 해당 주소를 메모리 해제해준다. 반드시 동적할
	// 당된 주소만 넣어주어야 한다.
	// C언어에서는 malloc, free 함수를 이용해서 동적할당하고 해제한다.
	// 아래는 NumAddr 포인터 변수가 스택에 8바이트만큼 만들어지고
	// new int 한 4바이트는 힙에 만들어진다.
	int* NumAddr = new int;
	//new int*;

	*NumAddr = 300;


	delete NumAddr;

	// 동적배열을 만들고 그 시작주소를 반환해준다.
	int* Array = new int[30];

	Array[4] = 10;

	delete[] Array;

	int* Addr = nullptr;

	Alloc(Addr);

	Alloc(&Addr);

	*Addr = 500;

	delete Addr;

	return 0;
}